// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mail.proto

package pb

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MailInfo struct {
	MailId                int64        `protobuf:"varint,1,opt,name=mailId,proto3" json:"mailId,omitempty"`
	MailName              string       `protobuf:"bytes,2,opt,name=mailName,proto3" json:"mailName,omitempty"`
	MailFrom              string       `protobuf:"bytes,3,opt,name=mailFrom,proto3" json:"mailFrom,omitempty"`
	MailContent           string       `protobuf:"bytes,4,opt,name=mailContent,proto3" json:"mailContent,omitempty"`
	MailEnclosures        []*Enclosure `protobuf:"bytes,5,rep,name=mailEnclosures,proto3" json:"mailEnclosures,omitempty"`
	IsMailReceive         bool         `protobuf:"varint,6,opt,name=isMailReceive,proto3" json:"isMailReceive,omitempty"`
	IsMailRead            bool         `protobuf:"varint,7,opt,name=isMailRead,proto3" json:"isMailRead,omitempty"`
	MailFromTime          int64        `protobuf:"varint,8,opt,name=mailFromTime,proto3" json:"mailFromTime,omitempty"`
	EnclosuresOverdueTime int32        `protobuf:"varint,9,opt,name=enclosuresOverdueTime,proto3" json:"enclosuresOverdueTime,omitempty"`
}

func (m *MailInfo) Reset()         { *m = MailInfo{} }
func (m *MailInfo) String() string { return proto.CompactTextString(m) }
func (*MailInfo) ProtoMessage()    {}
func (*MailInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cda5f053e74676b, []int{0}
}
func (m *MailInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MailInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MailInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MailInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MailInfo.Merge(m, src)
}
func (m *MailInfo) XXX_Size() int {
	return m.Size()
}
func (m *MailInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MailInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MailInfo proto.InternalMessageInfo

func (m *MailInfo) GetMailId() int64 {
	if m != nil {
		return m.MailId
	}
	return 0
}

func (m *MailInfo) GetMailName() string {
	if m != nil {
		return m.MailName
	}
	return ""
}

func (m *MailInfo) GetMailFrom() string {
	if m != nil {
		return m.MailFrom
	}
	return ""
}

func (m *MailInfo) GetMailContent() string {
	if m != nil {
		return m.MailContent
	}
	return ""
}

func (m *MailInfo) GetMailEnclosures() []*Enclosure {
	if m != nil {
		return m.MailEnclosures
	}
	return nil
}

func (m *MailInfo) GetIsMailReceive() bool {
	if m != nil {
		return m.IsMailReceive
	}
	return false
}

func (m *MailInfo) GetIsMailRead() bool {
	if m != nil {
		return m.IsMailRead
	}
	return false
}

func (m *MailInfo) GetMailFromTime() int64 {
	if m != nil {
		return m.MailFromTime
	}
	return 0
}

func (m *MailInfo) GetEnclosuresOverdueTime() int32 {
	if m != nil {
		return m.EnclosuresOverdueTime
	}
	return 0
}

type Enclosure struct {
	PropId int32 `protobuf:"varint,1,opt,name=propId,proto3" json:"propId,omitempty"`
	Count  int32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *Enclosure) Reset()         { *m = Enclosure{} }
func (m *Enclosure) String() string { return proto.CompactTextString(m) }
func (*Enclosure) ProtoMessage()    {}
func (*Enclosure) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cda5f053e74676b, []int{1}
}
func (m *Enclosure) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Enclosure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Enclosure.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Enclosure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Enclosure.Merge(m, src)
}
func (m *Enclosure) XXX_Size() int {
	return m.Size()
}
func (m *Enclosure) XXX_DiscardUnknown() {
	xxx_messageInfo_Enclosure.DiscardUnknown(m)
}

var xxx_messageInfo_Enclosure proto.InternalMessageInfo

func (m *Enclosure) GetPropId() int32 {
	if m != nil {
		return m.PropId
	}
	return 0
}

func (m *Enclosure) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

// messageCode=23001
type ReqMails struct {
}

func (m *ReqMails) Reset()         { *m = ReqMails{} }
func (m *ReqMails) String() string { return proto.CompactTextString(m) }
func (*ReqMails) ProtoMessage()    {}
func (*ReqMails) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cda5f053e74676b, []int{2}
}
func (m *ReqMails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqMails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqMails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqMails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqMails.Merge(m, src)
}
func (m *ReqMails) XXX_Size() int {
	return m.Size()
}
func (m *ReqMails) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqMails.DiscardUnknown(m)
}

var xxx_messageInfo_ReqMails proto.InternalMessageInfo

// messageCode=23001
type ResMails struct {
	MailInfoList []*MailInfo `protobuf:"bytes,1,rep,name=mailInfoList,proto3" json:"mailInfoList,omitempty"`
}

func (m *ResMails) Reset()         { *m = ResMails{} }
func (m *ResMails) String() string { return proto.CompactTextString(m) }
func (*ResMails) ProtoMessage()    {}
func (*ResMails) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cda5f053e74676b, []int{3}
}
func (m *ResMails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResMails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResMails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResMails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResMails.Merge(m, src)
}
func (m *ResMails) XXX_Size() int {
	return m.Size()
}
func (m *ResMails) XXX_DiscardUnknown() {
	xxx_messageInfo_ResMails.DiscardUnknown(m)
}

var xxx_messageInfo_ResMails proto.InternalMessageInfo

func (m *ResMails) GetMailInfoList() []*MailInfo {
	if m != nil {
		return m.MailInfoList
	}
	return nil
}

// messageCode=23002
type ResMailNotifi struct {
	MailInfo *MailInfo `protobuf:"bytes,1,opt,name=mailInfo,proto3" json:"mailInfo,omitempty"`
}

func (m *ResMailNotifi) Reset()         { *m = ResMailNotifi{} }
func (m *ResMailNotifi) String() string { return proto.CompactTextString(m) }
func (*ResMailNotifi) ProtoMessage()    {}
func (*ResMailNotifi) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cda5f053e74676b, []int{4}
}
func (m *ResMailNotifi) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResMailNotifi) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResMailNotifi.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResMailNotifi) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResMailNotifi.Merge(m, src)
}
func (m *ResMailNotifi) XXX_Size() int {
	return m.Size()
}
func (m *ResMailNotifi) XXX_DiscardUnknown() {
	xxx_messageInfo_ResMailNotifi.DiscardUnknown(m)
}

var xxx_messageInfo_ResMailNotifi proto.InternalMessageInfo

func (m *ResMailNotifi) GetMailInfo() *MailInfo {
	if m != nil {
		return m.MailInfo
	}
	return nil
}

//msg code: 23003
type ReqMailChange struct {
	MailChangeType int32 `protobuf:"varint,1,opt,name=mailChangeType,proto3" json:"mailChangeType,omitempty"`
	MailId         int64 `protobuf:"varint,2,opt,name=mailId,proto3" json:"mailId,omitempty"`
}

func (m *ReqMailChange) Reset()         { *m = ReqMailChange{} }
func (m *ReqMailChange) String() string { return proto.CompactTextString(m) }
func (*ReqMailChange) ProtoMessage()    {}
func (*ReqMailChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cda5f053e74676b, []int{5}
}
func (m *ReqMailChange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReqMailChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReqMailChange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReqMailChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqMailChange.Merge(m, src)
}
func (m *ReqMailChange) XXX_Size() int {
	return m.Size()
}
func (m *ReqMailChange) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqMailChange.DiscardUnknown(m)
}

var xxx_messageInfo_ReqMailChange proto.InternalMessageInfo

func (m *ReqMailChange) GetMailChangeType() int32 {
	if m != nil {
		return m.MailChangeType
	}
	return 0
}

func (m *ReqMailChange) GetMailId() int64 {
	if m != nil {
		return m.MailId
	}
	return 0
}

//msg code: 23003
type ResMailChange struct {
	MailChangeType int32   `protobuf:"varint,1,opt,name=mailChangeType,proto3" json:"mailChangeType,omitempty"`
	MailId         []int64 `protobuf:"varint,2,rep,packed,name=mailId,proto3" json:"mailId,omitempty"`
}

func (m *ResMailChange) Reset()         { *m = ResMailChange{} }
func (m *ResMailChange) String() string { return proto.CompactTextString(m) }
func (*ResMailChange) ProtoMessage()    {}
func (*ResMailChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_7cda5f053e74676b, []int{6}
}
func (m *ResMailChange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResMailChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResMailChange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResMailChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResMailChange.Merge(m, src)
}
func (m *ResMailChange) XXX_Size() int {
	return m.Size()
}
func (m *ResMailChange) XXX_DiscardUnknown() {
	xxx_messageInfo_ResMailChange.DiscardUnknown(m)
}

var xxx_messageInfo_ResMailChange proto.InternalMessageInfo

func (m *ResMailChange) GetMailChangeType() int32 {
	if m != nil {
		return m.MailChangeType
	}
	return 0
}

func (m *ResMailChange) GetMailId() []int64 {
	if m != nil {
		return m.MailId
	}
	return nil
}

func init() {
	proto.RegisterType((*MailInfo)(nil), "com.game.pb.MailInfo")
	proto.RegisterType((*Enclosure)(nil), "com.game.pb.Enclosure")
	proto.RegisterType((*ReqMails)(nil), "com.game.pb.ReqMails")
	proto.RegisterType((*ResMails)(nil), "com.game.pb.ResMails")
	proto.RegisterType((*ResMailNotifi)(nil), "com.game.pb.ResMailNotifi")
	proto.RegisterType((*ReqMailChange)(nil), "com.game.pb.ReqMailChange")
	proto.RegisterType((*ResMailChange)(nil), "com.game.pb.ResMailChange")
}

func init() { proto.RegisterFile("mail.proto", fileDescriptor_7cda5f053e74676b) }

var fileDescriptor_7cda5f053e74676b = []byte{
	// 412 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x53, 0xcb, 0x6e, 0xda, 0x40,
	0x14, 0x65, 0xec, 0x9a, 0x9a, 0x4b, 0xa9, 0xaa, 0x51, 0x41, 0xa3, 0x2e, 0x2c, 0xcb, 0xaa, 0x2a,
	0xaf, 0x2c, 0xf5, 0xb1, 0x28, 0x9b, 0x2e, 0x40, 0x54, 0x42, 0x6a, 0x41, 0x1a, 0xf1, 0x03, 0xc6,
	0x0c, 0x64, 0x24, 0xec, 0x71, 0x6c, 0x83, 0x94, 0xbf, 0xc8, 0x77, 0xe4, 0x4b, 0xb2, 0x64, 0x99,
	0x45, 0x16, 0x11, 0xfc, 0x48, 0x34, 0xe3, 0x07, 0x36, 0x4a, 0x56, 0xd9, 0xcd, 0x39, 0xf7, 0x70,
	0x38, 0xf7, 0x61, 0x80, 0xd0, 0xe7, 0x5b, 0x2f, 0x4e, 0x44, 0x26, 0x70, 0x37, 0x10, 0xa1, 0xb7,
	0xf1, 0x43, 0xe6, 0xc5, 0x4b, 0xe7, 0x51, 0x03, 0xf3, 0xbf, 0xcf, 0xb7, 0xd3, 0x68, 0x2d, 0xf0,
	0x00, 0xda, 0x52, 0x37, 0x5d, 0x11, 0x64, 0x23, 0x57, 0xa7, 0x05, 0xc2, 0x5f, 0xc0, 0x94, 0xaf,
	0x99, 0x1f, 0x32, 0xa2, 0xd9, 0xc8, 0xed, 0xd0, 0x0a, 0x97, 0xb5, 0xbf, 0x89, 0x08, 0x89, 0x7e,
	0xae, 0x49, 0x8c, 0x6d, 0xe8, 0xca, 0xf7, 0x58, 0x44, 0x19, 0x8b, 0x32, 0xf2, 0x4e, 0x95, 0xeb,
	0x14, 0xfe, 0x03, 0x1f, 0x25, 0x9c, 0x44, 0xc1, 0x56, 0xa4, 0xbb, 0x84, 0xa5, 0xc4, 0xb0, 0x75,
	0xb7, 0xfb, 0x63, 0xe0, 0xd5, 0x42, 0x7a, 0x55, 0x99, 0x5e, 0xa8, 0xf1, 0x57, 0xe8, 0xf1, 0x54,
	0xe6, 0xa7, 0x2c, 0x60, 0x7c, 0xcf, 0x48, 0xdb, 0x46, 0xae, 0x49, 0x9b, 0x24, 0xb6, 0x00, 0x4a,
	0xc2, 0x5f, 0x91, 0xf7, 0x4a, 0x52, 0x63, 0xb0, 0x03, 0x1f, 0xca, 0xcc, 0x0b, 0x1e, 0x32, 0x62,
	0xaa, 0xee, 0x1b, 0x1c, 0xfe, 0x05, 0x7d, 0x56, 0xfd, 0xef, 0x7c, 0xcf, 0x92, 0xd5, 0x8e, 0x29,
	0x71, 0xc7, 0x46, 0xae, 0x41, 0x5f, 0x2e, 0x3a, 0x43, 0xe8, 0x54, 0x69, 0xe5, 0x78, 0xe3, 0x44,
	0xc4, 0xc5, 0x78, 0x0d, 0x5a, 0x20, 0xfc, 0x19, 0x8c, 0x40, 0xec, 0xa2, 0x4c, 0xcd, 0xd6, 0xa0,
	0x39, 0x70, 0x00, 0x4c, 0xca, 0xae, 0x65, 0xc6, 0xd4, 0x99, 0xc8, 0xb7, 0xca, 0x9b, 0xe2, 0x61,
	0x1e, 0x56, 0x2e, 0xec, 0x1f, 0x4f, 0x33, 0x82, 0xd4, 0xc0, 0xfa, 0x8d, 0x81, 0x95, 0x1b, 0xa5,
	0x0d, 0xa9, 0x33, 0x82, 0x5e, 0x61, 0x33, 0x13, 0x19, 0x5f, 0x73, 0xfc, 0x3d, 0x5f, 0x9e, 0x14,
	0xa8, 0x4c, 0xaf, 0xfa, 0x54, 0x32, 0x67, 0x2e, 0x3d, 0x54, 0xac, 0xf1, 0x95, 0x1f, 0x6d, 0x18,
	0xfe, 0x96, 0xaf, 0x30, 0x47, 0x8b, 0x9b, 0x98, 0x15, 0xdd, 0x5d, 0xb0, 0xb5, 0xe3, 0xd2, 0xea,
	0xc7, 0x95, 0x1b, 0xa6, 0x6f, 0x34, 0xd4, 0xcf, 0x86, 0xa3, 0xdf, 0xf7, 0x47, 0x0b, 0x1d, 0x8e,
	0x16, 0x7a, 0x3a, 0x5a, 0xe8, 0xf6, 0x64, 0xb5, 0x0e, 0x27, 0xab, 0xf5, 0x70, 0xb2, 0x5a, 0x50,
	0xbf, 0xfc, 0x3b, 0xed, 0x53, 0xbd, 0x53, 0xf9, 0xdb, 0x65, 0x5b, 0x7d, 0x20, 0x3f, 0x9f, 0x03,
	0x00, 0x00, 0xff, 0xff, 0x42, 0x40, 0xf2, 0x7f, 0x2e, 0x03, 0x00, 0x00,
}

func (m *MailInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MailInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MailInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EnclosuresOverdueTime != 0 {
		i = encodeVarintMail(dAtA, i, uint64(m.EnclosuresOverdueTime))
		i--
		dAtA[i] = 0x48
	}
	if m.MailFromTime != 0 {
		i = encodeVarintMail(dAtA, i, uint64(m.MailFromTime))
		i--
		dAtA[i] = 0x40
	}
	if m.IsMailRead {
		i--
		if m.IsMailRead {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.IsMailReceive {
		i--
		if m.IsMailReceive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.MailEnclosures) > 0 {
		for iNdEx := len(m.MailEnclosures) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MailEnclosures[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMail(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.MailContent) > 0 {
		i -= len(m.MailContent)
		copy(dAtA[i:], m.MailContent)
		i = encodeVarintMail(dAtA, i, uint64(len(m.MailContent)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.MailFrom) > 0 {
		i -= len(m.MailFrom)
		copy(dAtA[i:], m.MailFrom)
		i = encodeVarintMail(dAtA, i, uint64(len(m.MailFrom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MailName) > 0 {
		i -= len(m.MailName)
		copy(dAtA[i:], m.MailName)
		i = encodeVarintMail(dAtA, i, uint64(len(m.MailName)))
		i--
		dAtA[i] = 0x12
	}
	if m.MailId != 0 {
		i = encodeVarintMail(dAtA, i, uint64(m.MailId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Enclosure) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Enclosure) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Enclosure) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintMail(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if m.PropId != 0 {
		i = encodeVarintMail(dAtA, i, uint64(m.PropId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ReqMails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqMails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqMails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ResMails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResMails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResMails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MailInfoList) > 0 {
		for iNdEx := len(m.MailInfoList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MailInfoList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMail(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ResMailNotifi) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResMailNotifi) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResMailNotifi) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MailInfo != nil {
		{
			size, err := m.MailInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMail(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReqMailChange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqMailChange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReqMailChange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MailId != 0 {
		i = encodeVarintMail(dAtA, i, uint64(m.MailId))
		i--
		dAtA[i] = 0x10
	}
	if m.MailChangeType != 0 {
		i = encodeVarintMail(dAtA, i, uint64(m.MailChangeType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ResMailChange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResMailChange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResMailChange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MailId) > 0 {
		dAtA3 := make([]byte, len(m.MailId)*10)
		var j2 int
		for _, num1 := range m.MailId {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintMail(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0x12
	}
	if m.MailChangeType != 0 {
		i = encodeVarintMail(dAtA, i, uint64(m.MailChangeType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMail(dAtA []byte, offset int, v uint64) int {
	offset -= sovMail(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MailInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MailId != 0 {
		n += 1 + sovMail(uint64(m.MailId))
	}
	l = len(m.MailName)
	if l > 0 {
		n += 1 + l + sovMail(uint64(l))
	}
	l = len(m.MailFrom)
	if l > 0 {
		n += 1 + l + sovMail(uint64(l))
	}
	l = len(m.MailContent)
	if l > 0 {
		n += 1 + l + sovMail(uint64(l))
	}
	if len(m.MailEnclosures) > 0 {
		for _, e := range m.MailEnclosures {
			l = e.Size()
			n += 1 + l + sovMail(uint64(l))
		}
	}
	if m.IsMailReceive {
		n += 2
	}
	if m.IsMailRead {
		n += 2
	}
	if m.MailFromTime != 0 {
		n += 1 + sovMail(uint64(m.MailFromTime))
	}
	if m.EnclosuresOverdueTime != 0 {
		n += 1 + sovMail(uint64(m.EnclosuresOverdueTime))
	}
	return n
}

func (m *Enclosure) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PropId != 0 {
		n += 1 + sovMail(uint64(m.PropId))
	}
	if m.Count != 0 {
		n += 1 + sovMail(uint64(m.Count))
	}
	return n
}

func (m *ReqMails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ResMails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.MailInfoList) > 0 {
		for _, e := range m.MailInfoList {
			l = e.Size()
			n += 1 + l + sovMail(uint64(l))
		}
	}
	return n
}

func (m *ResMailNotifi) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MailInfo != nil {
		l = m.MailInfo.Size()
		n += 1 + l + sovMail(uint64(l))
	}
	return n
}

func (m *ReqMailChange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MailChangeType != 0 {
		n += 1 + sovMail(uint64(m.MailChangeType))
	}
	if m.MailId != 0 {
		n += 1 + sovMail(uint64(m.MailId))
	}
	return n
}

func (m *ResMailChange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MailChangeType != 0 {
		n += 1 + sovMail(uint64(m.MailChangeType))
	}
	if len(m.MailId) > 0 {
		l = 0
		for _, e := range m.MailId {
			l += sovMail(uint64(e))
		}
		n += 1 + sovMail(uint64(l)) + l
	}
	return n
}

func sovMail(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMail(x uint64) (n int) {
	return sovMail(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MailInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MailInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MailInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MailId", wireType)
			}
			m.MailId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MailId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MailName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MailName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MailFrom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MailFrom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MailContent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MailContent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MailEnclosures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MailEnclosures = append(m.MailEnclosures, &Enclosure{})
			if err := m.MailEnclosures[len(m.MailEnclosures)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsMailReceive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsMailReceive = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsMailRead", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsMailRead = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MailFromTime", wireType)
			}
			m.MailFromTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MailFromTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnclosuresOverdueTime", wireType)
			}
			m.EnclosuresOverdueTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnclosuresOverdueTime |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Enclosure) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Enclosure: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Enclosure: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropId", wireType)
			}
			m.PropId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PropId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqMails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqMails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqMails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResMails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResMails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResMails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MailInfoList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MailInfoList = append(m.MailInfoList, &MailInfo{})
			if err := m.MailInfoList[len(m.MailInfoList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResMailNotifi) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResMailNotifi: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResMailNotifi: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MailInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMail
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMail
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MailInfo == nil {
				m.MailInfo = &MailInfo{}
			}
			if err := m.MailInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqMailChange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqMailChange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqMailChange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MailChangeType", wireType)
			}
			m.MailChangeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MailChangeType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MailId", wireType)
			}
			m.MailId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MailId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResMailChange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMail
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResMailChange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResMailChange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MailChangeType", wireType)
			}
			m.MailChangeType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMail
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MailChangeType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMail
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MailId = append(m.MailId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMail
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMail
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMail
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.MailId) == 0 {
					m.MailId = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMail
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MailId = append(m.MailId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MailId", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMail(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMail
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMail(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMail
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMail
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMail
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMail
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMail
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMail
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMail        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMail          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMail = fmt.Errorf("proto: unexpected end of group")
)
